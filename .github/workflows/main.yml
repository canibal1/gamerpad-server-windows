name: Build and Release

on:
  push:
    # Trigger on new version tags like v1.0.0
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    # Grant write permission so the action can create/update releases
    permissions:
      contents: write

    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache pip
        uses: actions/cache@v3
        with:
          # Cache pip downloads and built wheels to speed up subsequent runs
          path: |
            ~/.cache/pip
            C:\Users\runneradmin\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install ViGEmBus driver via Winget silently
        shell: pwsh
        run: |
          winget install --id=ViGEm.ViGEmBus -e --silent `
            --accept-package-agreements --accept-source-agreements `
            --override "/norestart"  # Suppress UI and auto-accept license

      - name: Build exe with PyInstaller
        shell: pwsh  # Use PowerShell so we can use backtick (`) for line continuation
        run: |
          pyinstaller --onefile --noconsole `
            --name "CoreOrbits-GamerPad" `
            --icon "app_icon.ico" `
            --collect-binaries vgamepad `
            --hidden-import engineio.async_drivers.aiohttp `
            --hidden-import engineio.async_aiohttp `
            --add-data "licences.txt;." `
            coreorbits_gamerpad_server.py

      - name: Download latest ViGEmBus EXE
        shell: pwsh
        run: |
          # Fetch latest release metadata
          $response = Invoke-RestMethod -Uri "https://api.github.com/repos/nefarius/ViGEmBus/releases/latest"
          # Select the asset matching the EXE pattern
          $asset = $response.assets | Where-Object { $_.name -match "ViGEmBus_.*_x64_x86_arm64\.exe$" }
          # Download the EXE to a fixed filename
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile "ViGEmBus_latest.exe"

      - name: Install Inno Setup
        run: |
          choco install innosetup -y

      - name: Package installer with Inno Setup
        run: |
          iscc gamerpad.iss

      - name: Publish GitHub Release and Upload Installer
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref }}
          name: Release ${{ github.ref }}
          artifacts: 'installers/CoreOrbits-GamerPad Installer.exe'
          token: ${{ secrets.GITHUB_TOKEN }}
